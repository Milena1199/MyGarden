// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyGarden.Data;

namespace MyGarden.Migrations
{
    [DbContext(typeof(MyGardenDb))]
    partial class MyGardenDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyGarden.Data.Models.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CureImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("MyGarden.Data.Models.GardenStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GardenStyles");
                });

            modelBuilder.Entity("MyGarden.Data.Models.GardeningZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClimateZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HardinessZone")
                        .HasColumnType("int");

                    b.Property<string>("SoilType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GardeningZones");
                });

            modelBuilder.Entity("MyGarden.Data.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("MyGarden.Data.Models.Pest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CureImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pests");
                });

            modelBuilder.Entity("MyGarden.Data.Models.PestAndPlant", b =>
                {
                    b.Property<Guid>("PestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PestId", "PlantId");

                    b.HasIndex("PlantId");

                    b.ToTable("PestsAndPlants");
                });

            modelBuilder.Entity("MyGarden.Data.Models.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Characteristics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClimateZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HardinessZone")
                        .HasColumnType("int");

                    b.Property<string>("HowToPlant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LenghtOfLife")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maintance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeasonsOfInterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoilType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("MyGarden.Data.Models.PlantAndDisease", b =>
                {
                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlantId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("PlantsAndDiseases");
                });

            modelBuilder.Entity("MyGarden.Data.Models.PlantAndStyle", b =>
                {
                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StyleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GardenStyleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlantId", "StyleId");

                    b.HasIndex("GardenStyleId");

                    b.ToTable("PlantsAndStyles");
                });

            modelBuilder.Entity("MyGarden.Data.Models.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("MyGarden.Data.Models.Image", b =>
                {
                    b.HasOne("MyGarden.Data.Models.Plant", "Plant")
                        .WithMany("Images")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyGarden.Data.Models.PestAndPlant", b =>
                {
                    b.HasOne("MyGarden.Data.Models.Pest", "Pest")
                        .WithMany("PestsAndPlants")
                        .HasForeignKey("PestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGarden.Data.Models.Plant", "Plant")
                        .WithMany("PestsAndPlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyGarden.Data.Models.Plant", b =>
                {
                    b.HasOne("MyGarden.Data.Models.Type", "Type")
                        .WithMany("Plants")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyGarden.Data.Models.PlantAndDisease", b =>
                {
                    b.HasOne("MyGarden.Data.Models.Disease", "Disease")
                        .WithMany("PlantsAndDiseases")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGarden.Data.Models.Plant", "Plant")
                        .WithMany("PlantsAndDiseases")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyGarden.Data.Models.PlantAndStyle", b =>
                {
                    b.HasOne("MyGarden.Data.Models.GardenStyle", "GardenStyle")
                        .WithMany("PlantsAndStyles")
                        .HasForeignKey("GardenStyleId");

                    b.HasOne("MyGarden.Data.Models.Plant", "Plant")
                        .WithMany("PlantsAndStyles")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

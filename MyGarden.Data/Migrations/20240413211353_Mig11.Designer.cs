// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyGarden.Data.Data;

#nullable disable

namespace MyGarden.Data.Migrations
{
    [DbContext(typeof(MyGardenDb))]
    [Migration("20240413211353_Mig11")]
    partial class Mig11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyGarden.Data.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CureImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.GardeningZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClimateZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HardinessZone")
                        .HasColumnType("int");

                    b.Property<string>("SoilType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GardeningZones");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.GardenStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GardenStyles");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Pest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CureImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pests");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.PestAndPlant", b =>
                {
                    b.Property<Guid>("PestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PestId", "PlantId");

                    b.HasIndex("PlantId");

                    b.ToTable("PestsAndPlants");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Characteristics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClimateZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HardinessZone")
                        .HasColumnType("int");

                    b.Property<string>("HowToPlant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LenghtOfLife")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maintance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeasonsOfInterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoilType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Plant_Category", b =>
                {
                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlantId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Plants_Categories");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Plant_Garden", b =>
                {
                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GardeningZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlantId", "GardeningZoneId");

                    b.HasIndex("GardeningZoneId");

                    b.ToTable("Plants_Gardens");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.PlantAndDisease", b =>
                {
                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlantId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("PlantsAndDiseases");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.PlantAndStyle", b =>
                {
                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StyleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GardenStyleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlantId", "StyleId");

                    b.HasIndex("GardenStyleId");

                    b.ToTable("PlantsAndStyles");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.GardeningZone", b =>
                {
                    b.HasOne("MyGarden.Data.Data.Models.User", "User")
                        .WithMany("GardeningZones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Image", b =>
                {
                    b.HasOne("MyGarden.Data.Data.Models.Plant", "Plant")
                        .WithMany("Images")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.PestAndPlant", b =>
                {
                    b.HasOne("MyGarden.Data.Data.Models.Pest", "Pest")
                        .WithMany("PestsAndPlants")
                        .HasForeignKey("PestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGarden.Data.Data.Models.Plant", "Plant")
                        .WithMany("PestsAndPlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pest");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Plant_Category", b =>
                {
                    b.HasOne("MyGarden.Data.Data.Models.Category", "Category")
                        .WithMany("PlantsAndCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGarden.Data.Data.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Plant_Garden", b =>
                {
                    b.HasOne("MyGarden.Data.Data.Models.GardeningZone", "GardeningZone")
                        .WithMany("Plants_Gardens")
                        .HasForeignKey("GardeningZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGarden.Data.Data.Models.Plant", "Plant")
                        .WithMany("Plants_Gardens")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GardeningZone");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.PlantAndDisease", b =>
                {
                    b.HasOne("MyGarden.Data.Data.Models.Disease", "Disease")
                        .WithMany("PlantsAndDiseases")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGarden.Data.Data.Models.Plant", "Plant")
                        .WithMany("PlantsAndDiseases")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.PlantAndStyle", b =>
                {
                    b.HasOne("MyGarden.Data.Data.Models.GardenStyle", "GardenStyle")
                        .WithMany("PlantsAndStyles")
                        .HasForeignKey("GardenStyleId");

                    b.HasOne("MyGarden.Data.Data.Models.Plant", "Plant")
                        .WithMany("PlantsAndStyles")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GardenStyle");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Category", b =>
                {
                    b.Navigation("PlantsAndCategories");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Disease", b =>
                {
                    b.Navigation("PlantsAndDiseases");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.GardeningZone", b =>
                {
                    b.Navigation("Plants_Gardens");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.GardenStyle", b =>
                {
                    b.Navigation("PlantsAndStyles");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Pest", b =>
                {
                    b.Navigation("PestsAndPlants");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.Plant", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("PestsAndPlants");

                    b.Navigation("PlantsAndDiseases");

                    b.Navigation("PlantsAndStyles");

                    b.Navigation("Plants_Gardens");
                });

            modelBuilder.Entity("MyGarden.Data.Data.Models.User", b =>
                {
                    b.Navigation("GardeningZones");
                });
#pragma warning restore 612, 618
        }
    }
}
